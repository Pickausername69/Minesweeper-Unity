<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>PostSharp.Patterns.Diagnostics</name>
  </assembly>
  <members>
    <member name="T:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy">
      <summary>
            Enumerates the different strategies to generate the value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Id" /> strategy.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.Default">
      <summary>
            The default value is <see cref="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.LazyGlobal" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.LazyGlobal">
      <summary>
            The same as <see cref="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.Global" />, but the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Id" /> property is generated
            lazily the first time it is being evaluated. This strategy is a bit slower than <see cref="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.Global" />
            in cases where the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Id" /> property is always evaluated. 
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.Global">
      <summary>
            Uses a global static incremental counter shared with all <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> instances in the current AppDomain.
            In heavily multi-threaded applications, this strategy can cause thread contention because of the need to serialize the
            access to the global counter. 
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy.Hierarchical">
      <summary>
            Uses a counter in the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ParentContext" />. 
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.CustomRecordLoggingOptions">
      <summary>
            Options for custom logging records. Exposed on the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.CustomRecordLoggingOptions" /> property.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.CustomRecordLoggingOptions.ActivityLevel">
      <summary>
            Gets or sets the default severity for custom messages and for entry and success messages of activities.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.CustomRecordLoggingOptions.ExceptionLevel">
      <summary>
            Gets or sets the default severity for failure custom messages.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.CustomRecordLoggingOptions.FailureLevel">
      <summary>
            Gets or sets the <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for failures of custom activities (defined by the <see cref="M:PostSharp.Patterns.Diagnostics.LogActivity.SetFailure(System.String)" /> method).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.CustomRecordLoggingOptions.IncludeSourceLineInfo">
      <summary>
            Determines whether source line information should be included in the log output.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Diagnostics.CustomRecordLoggingOptions.PropertyChanged">
      <summary>
            Event raised when a property of the current object has changed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.DefaultLoggingExceptionHandler">
      <summary>
            An implementation of the <see cref="T:PostSharp.Patterns.Diagnostics.ILoggingExceptionHandler" /> that attempts to log
            exceptions to the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Meta" /> logging role, then disables the backlog
            in case of internal exception (but not in case of invalid user code). 
            Not to be confused with <see cref="T:PostSharp.Patterns.Diagnostics.Custom.ILoggerExceptionHandler" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.DefaultLoggingExceptionHandler.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.DefaultLoggingExceptionHandler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.DefaultLoggingExceptionHandler.OnInternalException(PostSharp.Patterns.Diagnostics.LoggingExceptionInfo)">
      <summary>
            Method invoked when an exception is thrown in logging code.
            </summary>
      <param name="exceptionInfo">Information about the exception.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.DefaultLoggingExceptionHandler.OnInvalidUserCode(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@,PostSharp.Patterns.Diagnostics.LoggingTypeSource,System.String,System.Object[])">
      <summary>
            Method invoked when a logging component detects a precondition violation
            that probably stem from user-written code.
            </summary>
      <param name="callerInfo">Location of the code that performed the invalid call, or an empty instance if the information is not available.</param>
      <param name="source">Related <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />, or <c>null</c> if it is not available.</param>
      <param name="message">Error message formatting string.</param>
      <param name="args">Arguments for the formatting string, or <c>null</c>.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ILogAspect">
      <summary>
            Base interface for all method-level logging aspects.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ILogAspect.ProfileName">
      <summary>
            Gets the name of the logging profile.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ILoggingExceptionHandler">
      <summary>
            Defines methods called in case of exception in the logging component.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ILoggingExceptionHandler.OnInternalException(PostSharp.Patterns.Diagnostics.LoggingExceptionInfo)">
      <summary>
            Method invoked when an exception is thrown in logging code.
            </summary>
      <param name="exceptionInfo">Information about the exception.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ILoggingExceptionHandler.OnInvalidUserCode(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@,PostSharp.Patterns.Diagnostics.LoggingTypeSource,System.String,System.Object[])">
      <summary>
            Method invoked when a logging component detects a precondition violation
            that probably stem from user-written code.
            </summary>
      <param name="callerInfo">Location of the code that performed the invalid call, or an empty instance if the information is not available.</param>
      <param name="source">Related <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />, or <c>null</c> if it is not available.</param>
      <param name="message">Error message formatting string.</param>
      <param name="args">Arguments for the formatting string, or <c>null</c>.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ILogValueAspect">
      <summary>
            Base interface for all location-level logging aspects.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ILogValueAspect.ProfileName">
      <summary>
            Gets the name of the logging profile.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogAttribute">
      <summary>
            Custom attribute that, when applied on a method, causes PostSharp to implement tracing before and after execution of this method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LogAttribute" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogAttribute.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LogAttribute" /> and specifies a logging profile.
            </summary>
      <param name="profileName">The name of the logging profile, or <c>null</c> to use the default logging profile.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogAttributeBase">
      <summary>
            Base class for all method-level logging aspects.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogAttributeBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LogAttributeBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LogAttributeBase.ProfileName">
      <summary>
            Gets or sets the name of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />. 
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogExceptionAttribute">
      <summary>
            Custom attribute that, when applied on a method, causes PostSharp to implement tracing upon exception in this method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogExceptionAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LogExceptionAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingAbstractSource">
      <summary>
            Exposes the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for a given role and <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.DefaultState">
      <summary>
            Gets the default <see cref="T:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState" />, i.e. the state when there is the context-local configuration has
            not been overridden by <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.WithContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration)" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.GetLocalState(PostSharp.Patterns.Diagnostics.LoggingSourceLocalState@)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState" /> resolved for the current execution context.
            </summary>
      <param name="localState">The current state.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Determines whether logging is enabled for a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for the current <see cref="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Role" /> and <see cref="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Type" />.
            </summary>
      <param name="level">A <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.</param>
      <returns>
        <c>true</c> if logging is enabled, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Role">
      <summary>
            Gets the role.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Source">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> currently assigned to <see cref="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Role" /> and <see cref="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Type" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingAbstractSource.Type">
      <summary>
            Gets the <see cref="T:System.Type" />/
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingBackend">
      <summary>
            Base class for all logging back-ends (sometimes names sinks, targets, listeners) of the PostSharp logging system.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateAsyncCustomActivityContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateAsyncMethodContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> for a given async method.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration)">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" />.
            </summary>
      <param name="verbosityConfiguration"></param>
      <returns></returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateEphemeralContext(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" />.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> in which the new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> will be used.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> to be use only in the thread of <paramref name="threadContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateIteratorContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" /> for a given iterator method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateRecordBuilder">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateSyncCustomActivityContext(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" />.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> in which the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" /> will be used.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" /> to be used only in the thread of <paramref name="threadContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateSyncMethodContext(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> for a given normal (non-async, non-iterator) method.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> in which the method is executed.</param>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> to be used only in the thread of <paramref name="threadContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateThreadContext">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Creates a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateVerbosityConfiguration">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration" /> for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.CurrentContext">
      <summary>
            Gets the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.CurrentContextLocalConfiguration">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" /> for the current execution. Returns <see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackend.DefaultContextLocalConfiguration" />
            unless the context has been overwritten by <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.WithContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration)" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.DefaultContextLocalConfiguration">
      <summary>
            Gets the default <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" />, used unless it has been overwritten by the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.WithContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration)" />
            for the current execution context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.DefaultVerbosity">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration" /> of the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackend.DefaultContextLocalConfiguration" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.Dispose" /> method has been called, <c>false</c> if the object is being finalized by the garbage collector.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.GetAsyncContextOfTask(System.Threading.Tasks.Task)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> associated with a <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
      <param name="task">A <see cref="T:System.Threading.Tasks.Task" /> (typically representing an <c>async</c> method).</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> associated with <paramref name="task" />, or <c>null</c>
            if no <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> is associated with <paramref name="task" />.
            </returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.GetBackendOptions">
      <summary>
            Gets the formatting and rendering options for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackendOptions" /> for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.GetSource(System.String,System.String)">
      <summary>
            Returns a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> for the given role and, optionally, namespace.
            </summary>
      <param name="role">The role.  Typically one of the constants of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type, or a custom role.</param>
      <param name="ns">The namespace for which the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> is requested, or <c>null</c>
            if the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> is requested for the root namespace.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> for <paramref name="role" /> and <paramref name="ns" />. If no <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />
            exists for this role and type, this method shall create a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.GetSource(System.String,System.Type)">
      <summary>
            Returns a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
      <param name="role">The role. Typically one of the constants of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type, or a custom role.</param>
      <param name="type">The type.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for <paramref name="role" /> and <paramref name="type" />. If no <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />
            exists for this role and type, this method shall create a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.GetThreadContext">
      <summary>
            Returns the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> for the current <see cref="T:System.Threading.Thread" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.IsCorrupted">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> is in a state where it can no longer be recovered. This typically happens when
            an exception occurs while disabling or enabling.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.IsDisposed">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> has been disposed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.IsEnabled">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> is currently enabled. This property has precedence
            over, and does not affect, the minimal log levels set through the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.SetLevel(PostSharp.Patterns.Diagnostics.LogLevel)" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.OpenAsyncContext(PostSharp.Aspects.AsyncCallId,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> for a given async method.
            </summary>
      <param name="asyncCallId">The <see cref="T:System.Threading.Tasks.Task" /> associated to the async method being logged, or <c>null</c> if the <see cref="T:System.Threading.Tasks.Task" /> cannot be determined.</param>
      <param name="logMemberInfo">A reference to a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo" /> describing the method being logged.</param>
      <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" /> for <paramref name="logMemberInfo" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.OpenEphemeralContext(PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> for use in a given method. An  <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> is a degenerated
            kind of context, used to emit a single record.
            </summary>
      <param name="logMemberInfo">A reference to a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo" /> describing the method in which the record will be emitted.</param>
      <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.OpenEphemeralContext(PostSharp.Patterns.Diagnostics.LoggingTypeSource,PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext@)">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> for use in a given <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />. An  <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> is a degenerated
            kind of context, used to emit a single record.
            </summary>
      <param name="source">The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.</param>
      <param name="threadContext">The current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" />.</param>
      <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.OpenIteratorContext(System.Collections.IEnumerator,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" /> for a given iterator method.
            </summary>
      <param name="enumerator">The <see cref="T:System.Collections.IEnumerator" /> associated with the method to be logged.</param>
      <param name="logMemberInfo">A reference to a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo" /> describing the method being logged.</param>
      <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" /> for <paramref name="logMemberInfo" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.OpenSyncContext(PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> for a given normal (non-async, non-iterator) method.
            </summary>
      <param name="logMemberInfo">A reference to a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo" /> describing the method being logged.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> for <paramref name="logMemberInfo" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackend.Options">
      <summary>
            Gets the formatting and rendering options for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackend.WithContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration)">
      <summary>
            Changes the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" /> for the current execution context.
            </summary>
      <param name="configuration">The new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" /> for the current execution context.</param>
      <returns>An opaque and disposable cookie that allows to change the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackend.CurrentContextLocalConfiguration" /> back to its original value</returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingBackendOptions">
      <summary>
            Options for the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LoggingBackendOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.ContextIdGenerationStrategy">
      <summary>
            Determines how the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Id" /> property is generated.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.ContextMaxLength">
      <summary>
            Max length of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> property.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.IncludeActivityExecutionTime">
      <summary>
            Determines whether the execution time should be measured for custom activities. The default value is <c>false</c>.
            This property does not affect the measurement of execution time of methods, which is only influenced
            by the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.IncludeExecutionTime" /> property of the build-time logging profile.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.IncludeManualLoggingSourceLineInfo">
      <summary>
            Determines whether source line information should be included in the log output for manual
            logging (written using <see cref="T:PostSharp.Patterns.Diagnostics.LogSource" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.IsIncludeManualLoggingSourceLineInfoSpecified">
      <summary>
            Determines whether the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.IncludeManualLoggingSourceLineInfo" /> has been set.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.LogLevelIgnoredForSystemRecords">
      <summary>
            Determines whether the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.Level" /> property is ignored by the current back-end for auto-generated 
            (i.e. non-manual) logging records. Some back-ends may not support overriding the level of records.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.RootSyntheticId">
      <summary>
            Gets or sets the root of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property. The default
            is a hex-formatted random 64-bit value.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.SyntheticIdFormatter">
      <summary>
            Determines how the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property is generated.
            The default value is an instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Formatters.DefaultSyntheticIdFormatter" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.SyntheticIdMaxLength">
      <summary>
            Gets or sets the maximal length of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingBuildTimeConfiguration">
      <summary>
            Root element of the XML configuration (<c>postsharp.config</c>) for the Logging component.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingBuildTimeConfiguration.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LoggingBuildTimeConfiguration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingBuildTimeConfiguration.Profiles">
      <summary>
            Gets the collection of logging profiles.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration">
      <summary>
            Stores the context-sensitive configuration, i.e. the configuration that is specific to the current execution context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.#ctor(PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" />.
            </summary>
      <param name="verbosityConfiguration">A <see cref="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.Clone">
      <summary>
            Returns a shallow copy of the current instance, sharing the same value of the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.Verbosity" /> property.
            </summary>
      <returns>A shallow copy of the current instance</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.Freeze">
      <summary>
            Prevents changes in the current instance. This method is called when the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" /> is passed to the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.WithContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration)" /> method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.IsReadOnly">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" /> is read-only. A <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" /> is frozen when it's assigned to a caching backend.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.Verbosity">
      <summary>
            Gets the configuration of the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> that's still being logged for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfigurationScope">
      <summary>
            Represents a scope started with the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.WithContextLocalConfiguration(PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration)" /> method.
            Dispose the scope to close it. It is recommended to use the <c>using</c> keyword.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfigurationScope.Dispose">
      <summary>
            Disposes the current scope.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException">
      <summary>
            Exception thrown when an operation assumes a different current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException" /> and specifies the exception message.
            </summary>
      <param name="message"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextMismatchException" /> and specifies the exception message and an inner <see cref="T:System.Exception" />.
            </summary>
      <param name="message"></param>
      <param name="inner"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingException">
      <summary>
            Exception thrown by <see cref="T:PostSharp.Patterns.Diagnostics.ThrowingLoggingExceptionHandler" /> when the logging subsystem throws an exception.
            The <see cref="P:System.Exception.InnerException" /> property gets the original <see cref="T:System.Exception" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingException.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingException" /> with the default error message.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingException.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingException" /> with a specific error message.
            </summary>
      <param name="message"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingException" /> with a specific error message and <see cref="P:System.Exception.InnerException" />.
            </summary>
      <param name="message"></param>
      <param name="inner"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingExceptionInfo">
      <summary>
            Arguments of the <see cref="M:PostSharp.Patterns.Diagnostics.ILoggingExceptionHandler.OnInternalException(PostSharp.Patterns.Diagnostics.LoggingExceptionInfo)" /> method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingExceptionInfo.Backend">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> from which the exception stems, or <c>null</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingExceptionInfo.Exception">
      <summary>
            Gets the <see cref="T:System.Exception" /> object, or <c>null</c> if the <see cref="T:System.Exception" />
            object has been lost, which is the case when there is an exception while logging
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingExceptionInfo.Source">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> to which the exception is related, or <c>null</c>.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource">
      <summary>
            Allows to enable or disable logging for a whole namespace. 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Backend">
      <summary>
            Gets the parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Clone(System.String)">
      <summary>
            Returns a deep clone of the current object.
            </summary>
      <param name="role">The role of the new instance, or <c>null</c> to keep the same role as in the source instance. The default value is <c>null</c>.</param>
      <returns>A deep clone of the current instance.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.DisplayFullName">
      <summary>
            Gets the full name of the current type or namespace (including the parent namespace).
            For generic types, the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.DisplayFullName" /> property does not include the arity, i.e. the full name of <c>List&lt;T&gt;</c> is <c> System.Collections.Generic.List</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.DisplayName">
      <summary>
            Gets the last component of the name of the type or namespace, in the form that should be reported to the log. 
            For generic types, the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.DisplayName" /> property does not include the arity, i.e. the name of <c>List&lt;T&gt;</c> is <c>List</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.FullName">
      <summary>
            Gets the full name of the current type or namespace (including the parent namespace).
            For generic types, the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.FullName" /> property includes the arity, i.e. the full name of <c>List&lt;T&gt;</c> is <c> System.Collections.Generic.List`1</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Level">
      <summary>
            Gets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging is enabled for the current
            namespace or type.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Name">
      <summary>
            Gets the last component of the name of the type or namespace. For instance, when <see cref="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.FullName" /> is 
            <c>PostSharp.Patterns.Diagnostics.LoggingBackend</c>, <see cref="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Name" /> is <c>LoggingBackend</c>.
            For generic types, the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Name" /> property includes the arity, i.e. the name of <c>List&lt;T&gt;</c> is <c>List`1</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Parent">
      <summary>
            Gets the parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />, or <c>null</c> if the current object
            represents the root namespace.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Refresh">
      <summary>
            Refreshes the logging level from the back-end from the current node and all children nodes.
            The back-end-defined logging level is cached for performance reasons.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.Role">
      <summary>
            Gets the logging role for the current role. Typical values of this property are listed in the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.SetLevel(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging is enabled for the current namespace and type and all children
            namespaces and types.
            </summary>
      <param name="level"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingOptions">
      <summary>
            Represents the build-time options for logging records.
            This class is exposed by <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.DefaultOptions" /> and <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.ExceptionOptions" />.
            The values of this class cannot be changed at run-time because they influence the way PostSharp instruments the code.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingOptions.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingOptions" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingOptions.Clone">
      <summary>
            Returns a clone of the current object.
            </summary>
      <returns></returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingOptions.Freeze">
      <summary>
            Prevents the object from being modified.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeGenericParameters">
      <summary>
            Not implemented.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterName">
      <summary>
            Determines whether the parameter names should be logged. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterType">
      <summary>
            Determines whether the parameter types should be logged. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterValue">
      <summary>
            Determines whether the parameter values should be logged. The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeReturnValue">
      <summary>
            Determines whether the return value should be logged. The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeThisValue">
      <summary>
            Determines whether the value of <c>this</c> argument in an instance method should be logged. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingOptions.Level">
      <summary>
            Gets or sets the <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> with which the record should be emitted. The default value is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingOptions.Merge(PostSharp.Patterns.Diagnostics.LoggingOptions)">
      <summary>
            Merges the values of another <see cref="T:PostSharp.Patterns.Diagnostics.LoggingOptions" /> object within the current object.
            The values of the other object take precendence over the values of the current object.
            </summary>
      <param name="overridingOptions">Values to be merged into the current object.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingProfile">
      <summary>
            Logging profiles are named configurations of logging aspects and influence the way PostSharp generates the
            code instrumentation. They are typically instantiated in <c>postsharp.config</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfile.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LoggingProfile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.AllowDynamicEnabling">
      <summary>
            Determines whether logging can be dynamically enabled or disabled after initialization. The default value of this property
            is <c>true</c>. When it is set to <c>false</c>, PostSharp generates code that allows the JIT compiler to completely remove logging instructions 
            for types that are not enabled.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.Backend">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> associated with the current profile.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.DefaultOptions">
      <summary>
            Gets or sets the options for "normal" records, e.g. method entry, method success, or value change.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.Description">
      <summary>
            Gets or sets a human-readable description for the current profile. The description is only used when representing
            the profile in PostSharp Tools for Visual Studio.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.EnabledRecordKinds">
      <summary>
            Gets or sets the set of record kinds that are enabled for the given profile. Change it with care. Not all combinations are tested.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfile.EnsureNotFrozen">
      <summary>
            Throws an <see cref="T:System.InvalidOperationException" /> if the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingProfile.Freeze" /> method has been called on this object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.ExceptionOptions">
      <summary>
            Gets or sets the options for "exception" records, e.g. method exceptions or slow executions.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.ExecutionTimeThreshold">
      <summary>
            Gets or sets the warning threshold, in milliseconds.
            If the execution of a method takes longer than that, its success is logged with <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />,
            and the time it took is logged.
            If the value is 0, this feature is disabled.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfile.Freeze">
      <summary>
            Prevents changes in the current object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfile.GetAbstractSource(System.Type)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingAbstractSource" /> for a given <see cref="T:System.Type" /> in the current profile.
            </summary>
      <param name="type">A <see cref="T:System.Type" />.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingAbstractSource" /> for the given <paramref name="type" /> and the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.Role" /> of the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.IncludeAwaitedTask">
      <summary>
            Determines whether the operand of the <c>await</c> operator should be included in the log.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.IncludeExecutionTime">
      <summary>
            Indicates that the execution time of a method should be tracked and logged on exit.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.IncludeSourceLineInfo">
      <summary>
            Determines whether source-line information should be included in the log.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.Name">
      <summary>
            Gets or sets the name of the current profile. The name of the profile should match the constructor argument
            of the <see cref="T:PostSharp.Patterns.Diagnostics.LogAttribute" /> aspect.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingProfile.Role">
      <summary>
            Gets or sets the role of the current profile. Profiles of different roles can have different run-time options, including different
            back-ends. See <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.Roles" /> to access role-based run-time options.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfile.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingProfileCollection">
      <summary>
            Collection of instances of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfileCollection.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfileCollection" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingProfileRepository">
      <summary>
            Provides access to logging profiles (<see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />) at run-time. Exposed by the
            <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.Profiles" /> property. Note that each assembly of the <see cref="T:System.AppDomain" />
            contains its own copy of each <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" /> used in this assembly, and each copy
            may be different, even if they have the same name.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfileRepository.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LoggingProfileRepository</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfileRepository.GetProfile(System.String,System.Reflection.Assembly)">
      <summary>
            Gets a profile given its name and declaring <see cref="T:System.Reflection.Assembly" />.
            </summary>
      <param name="name">Name of the profile.</param>
      <param name="assembly">Assembly in which the profile is defined.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />, or <c>null</c> if <paramref name="assembly" /> does not contain a profile named <paramref name="name" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingProfileRepository.RegisterProfile(System.String,System.Reflection.Assembly,PostSharp.Patterns.Diagnostics.LoggingProfile)">
      <summary>
            Register a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />. This method is invoked by the code generated by PostSharp.
            </summary>
      <param name="name">Name of the profile.</param>
      <param name="assembly">Assembly in which the profile is defined.</param>
      <param name="profile">The profile itself.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration">
      <summary>
            Role-specific logging options. There is one instance of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> class for each logging role.
            The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> is a run-time concept, with no build-time meaning.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.Backend">
      <summary>
            Gets or sets the back-end that implements logging for the given <see cref="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.Role" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.CustomRecordLoggingOptions">
      <summary>
            Gets the options that influence the rendering of log records emitted with the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.GetAbstractSource(System.Type)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingAbstractSource" /> for a given <see cref="T:System.Type" /> in the current role.
            </summary>
      <param name="type">A <see cref="T:System.Type" />.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingAbstractSource" /> for the given <paramref name="type" /> in the current role.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.IsBackendSpecified">
      <summary>
            Determines whether the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.Backend" /> has been explicitly specified.
            This property is <c>false</c> by default, which means that the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.Backend" /> property
            will evaluate to <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.DefaultBackend" />.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.PropertyChanged">
      <summary>
            Event raised when a property of this class changes.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration.Role">
      <summary>
            Gets the role whose options are represented by the current object.
            See <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> for a list of standard logging roles.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository">
      <summary>
            Provides access to role-specific options (<see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" />). This class is exposed on the
            <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.Profiles" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.Audit">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> object for the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Audit" /> role.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.Caching">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> object for the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Caching" /> role.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.Custom">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> object for the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Custom" /> role.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.Item(System.String)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> for a given role.
            </summary>
      <param name="role">The role name. See <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> for a list of standard roles.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" />. If no <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> exist for the specific <paramref name="role" />,
            a new instance is created and returned.
            </returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.Meta">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> object for the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Meta" /> role.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingRoleConfigurationRepository.Tracing">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> object for the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Tracing" /> role.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingServices">
      <summary>
            The entry point to configure <c>PostSharp.Patterns.Diagnostics</c> logging at run-time.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingServices.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.LoggingServices</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingServices.CurrentTimestamp">
      <summary>
            Gets a timestamp, in milliseconds.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingServices.DefaultBackend">
      <summary>
            Gets or sets the default <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> used for logging in the current application.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Diagnostics.LoggingServices.DefaultBackendChanged">
      <summary>
            Event raised when the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.DefaultBackend" /> property has changed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingServices.ExceptionHandler">
      <summary>
            Gets or sets the object that handles exceptions thrown by the logging logic. This property is set by default to an instance
            of the <see cref="T:PostSharp.Patterns.Diagnostics.DefaultLoggingExceptionHandler" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingServices.GetSource(System.String,System.String)">
      <summary>
            Returns a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> for the given role and, optionally, namespace.
            </summary>
      <param name="role">The role.  Typically one of the constants of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type, or a custom role.</param>
      <param name="ns">The namespace for which the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> is requested, or <c>null</c>
            if the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> is requested for the root namespace.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" /> for <paramref name="role" /> and <paramref name="ns" />. If no <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />
            exists for this role and type, this method shall create a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingServices.GetSource(System.String,System.Type)">
      <summary>
            Returns a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
      <param name="role">The role. Typically one of the constants of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type, or a custom role.</param>
      <param name="type">The type.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for <paramref name="role" /> and <paramref name="type" />. If no <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />
            exists for this role and type, this method shall create a new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingServices.Initialize">
      <summary>
            Forces initialization of the <c>PostSharp.Patterns.Diagnostics</c> package, i.e.
            binds the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> facade API (which is defined in the <c>PostSharp.Patterns.Common</c> package) to the implementation
            by the <c>PostSharp.Patterns.Diagnostics</c> package.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingServices.OnInternalException(System.Exception,PostSharp.Patterns.Diagnostics.LoggingTypeSource)">
      <summary>
            Method invoked when an exception is caught in logging code.
            </summary>
      <param name="exception">The caught exception, or <c>null</c> if it is not available.</param>
      <param name="source">The relevant <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />, or <c>null</c> if it could not be determined.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingServices.OnInternalException(System.Exception,PostSharp.Patterns.Diagnostics.LoggingTypeSource,PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder)">
      <summary>
            Method invoked when an exception is caught in logging code. This overload disposed the <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <param name="exception">The caught exception, or <c>null</c> if it is not available.</param>
      <param name="source">The relevant <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />, or <c>null</c> if it could not be determined.</param>
      <param name="recordBuilder">An optional <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> that will be disposed.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingServices.Profiles">
      <summary>
            Gets the repository of build-time logging profiles.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingServices.Roles">
      <summary>
            Gets the repository of role-specific run-time logging options.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingServices.Formatters">
      <summary>
            Provides access to formatters. This class is exposed on the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingServices.Formatters" /> property.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState">
      <summary>
            Stores the state of a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingAbstractSource" /> for the current execution context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState.Backend">
      <summary>
            Gets the resolved <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Determines whether logging is enabled for a specified <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.
            </summary>
      <param name="level">A <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.</param>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState.Source">
      <summary>
            Gets the resolved <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource">
      <summary>
            Allows to enable or disable logging for a specific <see cref="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.SourceType" /> and exposes some information regarding this <see cref="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.SourceType" />/
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingTypeSource.#ctor(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Creates an instance of <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.
            </summary>
      <param name="parent">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />.</param>
      <param name="sourceType">The <see cref="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.SourceType" /> represented by the new <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingTypeSource.Clone(System.String)">
      <summary>
            Returns a deep clone of the current object.
            </summary>
      <param name="role">The role of the new instance, or <c>null</c> to keep the same role as in the source instance. The default value is <c>null</c>.</param>
      <returns>A deep clone of the current instance.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.GenericParameterCount">
      <summary>
            Gets the number of generic parameters in <see cref="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.SourceType" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingTypeSource.IsBackendEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Checks whether logging is enabled in the back-end for the given level.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingTypeSource.IsEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Determines whether logging is enabled for the given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.
            </summary>
      <param name="level"></param>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.Options">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoleConfiguration" /> for the current role. This property is a shortcut to <c>LoggingServices.Roles[this.Role]</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingTypeSource.Refresh">
      <summary>
            Refreshes the logging level from the back-end from the current node and all children nodes.
            The back-end-defined logging level is cached for performance reasons.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingTypeSource.SourceType">
      <summary>
            The type represented by the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration">
      <summary>
            Manages the configuration of the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for individual types and namespaces. This class is exposed by the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration.Verbosity" /> property.
            To create a new instance of this class, call <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.CreateVerbosityConfiguration" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.Backend">
      <summary>
            Gets the parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.Finalize">
      <summary>
            Destructor.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.IsDisposed">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration" /> has already been disposed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.IsEnabled">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> is currently enabled. This property has precedence
            over, and does not affect, the minimal log levels set through the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource.SetLevel(PostSharp.Patterns.Diagnostics.LogLevel)" /> method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.IsReadOnly">
      <summary>
            Determines whether the current instance is read-only. A <see cref="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration" /> is frozen when in starts being used by a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingContextLocalConfiguration" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.Reset">
      <summary>
            Resets all settings to their default value (i.e. <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug" /> level for everything).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.SetMinimalLevel(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for all namespaces, types, and roles.
            </summary>
      <param name="level">The minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging should be enabled. If this is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None" />, logging won't be enabled at all.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.SetMinimalLevel(PostSharp.Patterns.Diagnostics.LogLevel,System.String)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for all namespaces and types for a specific role.
            </summary>
      <param name="level">The minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging should be enabled. If this is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None" />, logging won't be enabled at all.</param>
      <param name="role">The role (typically a value from the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type).</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.SetMinimalLevelForNamespace(PostSharp.Patterns.Diagnostics.LogLevel,System.String)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for a specific namespace.
            </summary>
      <param name="level">The minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging should be enabled. If this is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None" />, logging won't be enabled at all.</param>
      <param name="ns">The namespace.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.SetMinimalLevelForNamespace(PostSharp.Patterns.Diagnostics.LogLevel,System.String,System.String)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for a specific namespace and role.
            </summary>
      <param name="level">The minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging should be enabled. If this is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None" />, logging won't be enabled at all.</param>
      <param name="ns">The namespace.</param>
      <param name="role">The role (typically a value from the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type).</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.SetMinimalLevelForType(PostSharp.Patterns.Diagnostics.LogLevel,System.Type)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for a specific <see cref="T:System.Type" />.
            </summary>
      <param name="level">The minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging should be enabled. If this is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None" />, logging won't be enabled at all.</param>
      <param name="type">The <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.SetMinimalLevelForType(PostSharp.Patterns.Diagnostics.LogLevel,System.Type,System.String)">
      <summary>
            Sets the minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for a specific <see cref="T:System.Type" /> and role.
            </summary>
      <param name="level">The minimal <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for which logging should be enabled. If this is <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.None" />, logging won't be enabled at all.</param>
      <param name="type">The <see cref="T:System.Type" />.</param>
      <param name="role">The role (typically a value from the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" /> type).</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration.Use">
      <summary>
            Uses the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingVerbosityConfiguration" /> for the current execution context.
            </summary>
      <returns>An opaque and disposable cookie that allows to change the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackend.CurrentContextLocalConfiguration" /> back to its original value</returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.LogValueAttribute">
      <summary>
            Custom attribute that, when applied on a field or property, causes PostSharp to implement tracing when its value changes.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogValueAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LogValueAttribute" /> for the default profile.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.LogValueAttribute.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.LogValueAttribute" /> and specifies a profile name.
            </summary>
      <param name="profileName">The name of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" /> to use.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.LogValueAttribute.ProfileName">
      <summary>
            Gets or sets the name of the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />. 
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.NotLoggedAttribute">
      <summary>
            Indicates that the value of this parameter should not be logged.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.NotLoggedAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.NotLoggedAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ThrowingLoggingExceptionHandler">
      <summary>
            An implementation of the <see cref="T:PostSharp.Patterns.Diagnostics.ILoggingExceptionHandler" /> that throws a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingException" />
            or an <see cref="T:System.InvalidOperationException" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ThrowingLoggingExceptionHandler.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.ThrowingLoggingExceptionHandler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ThrowingLoggingExceptionHandler.OnInternalException(PostSharp.Patterns.Diagnostics.LoggingExceptionInfo)">
      <summary>
            Method invoked when an exception is thrown in logging code.
            </summary>
      <param name="exceptionInfo">Information about the exception.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ThrowingLoggingExceptionHandler.OnInvalidUserCode(PostSharp.Patterns.Diagnostics.Contexts.CallerInfo@,PostSharp.Patterns.Diagnostics.LoggingTypeSource,System.String,System.Object[])">
      <summary>
            Method invoked when a logging component detects a precondition violation
            that probably stem from user-written code.
            </summary>
      <param name="callerInfo">Location of the code that performed the invalid call, or an empty instance if the information is not available.</param>
      <param name="source">Related <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" />, or <c>null</c> if it is not available.</param>
      <param name="message">Error message formatting string.</param>
      <param name="args">Arguments for the formatting string, or <c>null</c>.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Audit.AuditAttribute">
      <summary>
            Custom attribute that, when applied to a method, causes PostSharp to audit execution of this method. Whenever an audited method is executed, the 
            <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event is raised. You need to register your own logic to the <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event,
            for instance to append the record to a database table.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Audit.AuditAttribute.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditAttribute" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord">
      <summary>
            Represents an audit record published by the <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.#ctor(System.Type,System.String,PostSharp.Patterns.Diagnostics.LogRecordKind)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord" />.
            </summary>
      <param name="declaringType">Declaring type of the audited method.</param>
      <param name="memberName">Name of the audited method.</param>
      <param name="recordKind">Kind of record (typically <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodSuccess" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException" />).</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.DeclaringType">
      <summary>
            Gets the declaring type of the method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.Exception">
      <summary>
            Gets the <see cref="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.Exception" /> if the method failed, or <c>null</c> if the method succeeded.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.MemberName">
      <summary>
            Gets the name of the method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.RecordKind">
      <summary>
            Gets the kind of record (typically <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodSuccess" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException" />). 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.Target">
      <summary>
            Gets the instance on which the method was executed, or <c>null</c> if the method is a static method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.Text">
      <summary>
            Gets a string describing the operation (typically, the method type, name, and parameters).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecord.Time">
      <summary>
            Gets the time when the execution ended.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecordEventArgs">
      <summary>
            Arguments of the <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Audit.AuditRecordEventArgs.#ctor(PostSharp.Patterns.Diagnostics.Audit.AuditRecord)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecordEventArgs" />.
            </summary>
      <param name="record">The published <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Audit.AuditRecordEventArgs.Record">
      <summary>
            Gets the published record.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Audit.AuditServices">
      <summary>
            Exposes a <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event, which is raised whenever an audited method is executed.
            </summary>
    </member>
    <member name="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished">
      <summary>
            Event raised whenever an audited method is executed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> used by default to write error messages of the <see cref="F:PostSharp.Patterns.Diagnostics.LoggingRoles.Meta" /> role.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend.CreateRecordBuilder">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Creates a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend.GetTextBackendOptions">
      <summary>
            Gets the options.
            </summary>
      <returns></returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.MetaLoggingBackend.Write(PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Formatters.UnsafeString,System.Exception)">
      <summary>
            Writes a message.
            </summary>
      <param name="level"></param>
      <param name="message"></param>
      <param name="exception"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend">
      <summary>
            A base class for all text-based logging back-ends.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.LoggingBackend.Dispose" /> method has been called, <c>false</c> if the object is being finalized by the garbage collector.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend.GetBackendOptions">
      <summary>
            Gets the formatting and rendering options for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.
            </summary>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackendOptions" /> for the current <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend.GetTextBackendOptions">
      <summary>
            Gets the options.
            </summary>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend.Options">
      <summary>
            Gets the back-end options.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions">
      <summary>
            Options for the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.ActionMaxLength">
      <summary>
            Max length of a log record. The default value is 2048.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.AppendTrailingPeriod">
      <summary>
            Determines whether log messages should be ended with a trailing period. The default value is <c>true</c>
            because we really like trailing periods at PostSharp, but other opinions are valid.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.Delimiter">
      <summary>
            String used to separate different parts of the logging record. The default value is a pipe surrounded by spaces (<c> | </c>).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.ExceptionFormatter">
      <summary>
            The <see cref="T:PostSharp.Patterns.Formatters.Formatter`1" /> used to format the <see cref="T:System.Exception" /> in which a method or custom activity results. This is different
            than the formatter used to format parameter or property values of <see cref="T:System.Exception" /> type. The default implementation prints the full type name of the <see cref="T:System.Exception" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IncludeExceptionDetails">
      <summary>
            Determines whether exception details (basically <c>Exception.ToString</c>) should be appended to the log.
            The default value is <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IncludeNamespace">
      <summary>
            Determines whether the full namespace of types should be included in the log. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IncludeType">
      <summary>
            Determines whether the name of the type of the logged method should be included in the log. The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IndentSpaces">
      <summary>
            Number of spaces for each indentation level. The default value is 2.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.ShouldLogExceptionPredicate">
      <summary>
            Gets or sets a predicate that determines whether an exception should be logged. This predicate is evaluated only
            when the method entry is not logged. When the method entry is logged, exceptions are always logged.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend">
      <summary>
            A specialized back-end that publishes audit records to the <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend.CreateRecordBuilder">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Creates a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend.GetTextBackendOptions">
      <summary>
            Gets the options.
            </summary>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend.Options">
      <summary>
            Gets the back-end options.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend.PublishRecord(PostSharp.Patterns.Diagnostics.Audit.AuditRecord)">
      <summary>
            Publishes an <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord" /> to the <see cref="E:PostSharp.Patterns.Diagnostics.Audit.AuditServices.RecordPublished" /> event.
            </summary>
      <param name="record"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackendOptions">
      <summary>
            Options of <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackendOptions.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackendOptions" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder">
      <summary>
            Record builder for the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.#ctor(PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.Backend">
      <summary>
            Gets the current <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Initializes the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to emit a standard (i.e. non-custom) record for
            a given context and method.
            </summary>
      <param name="context">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> of the record.</param>
      <param name="recordInfo">Information about the record.</param>
      <param name="memberInfo">Information about the method, property, or field.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.CreateRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Creates an <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord" />.
            </summary>
      <param name="context">The context of the record.</param>
      <param name="recordInfo">Information about the record.</param>
      <param name="memberInfo">Information about the method, property, or field.</param>
      <returns>An <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.CurrentRecord">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Audit.AuditRecord" /> being currently built.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.SetException(System.Exception)">
      <summary>
            Sets the exception for the method or activity.
            </summary>
      <param name="exception">An <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.SetThis``1(``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets the <c>this</c> (instance) value and uses a given formatter.
            </summary>
      <param name="value">The value of the <c>this</c> instance.</param>
      <param name="formatter">The formatter to be used.</param>
      <typeparam name="T">Type of the class being logged.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditRecordBuilder.Write(PostSharp.Patterns.Formatters.UnsafeString)">
      <summary>
            Writes the final message to the back-end.
            </summary>
      <param name="message">The final message.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditTypeSource">
      <summary>
            Represents a type logged using the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditTypeSource.#ctor(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditTypeSource" />.
            </summary>
      <param name="parent">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />.</param>
      <param name="type">The declaring type of audited methods.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Audit.AuditTypeSource.IsBackendEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Checks whether logging is enabled in the back-end for the given level.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend">
      <summary>
            Logging back-end that logs to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend.CreateRecordBuilder">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend.CreateTypeSource(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Creates a <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the given role and type.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend.GetTextBackendOptions">
      <summary>
            Gets the options.
            </summary>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend.Options">
      <summary>
            Gets the back-end options.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions">
      <summary>
            Options the for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.IncludeLevel">
      <summary>
            Determines whether the <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> should be written to the console. The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.IncludeRole">
      <summary>
            Determines whether the role should be written to the console. The default value is <c>true</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.IncludeTimestamp">
      <summary>
            Determines whether the current date and time should be written to the console. The default value is <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.PreferSystemColors">
      <summary>
            When <c>true</c>, the console logger will not attempt to use VT ANSI codes to format the output.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.RoleWidth">
      <summary>
            Minimal width of the role column. The default value is <c>6</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.Theme">
      <summary>
            Gets the color theme.  A set of ready-made themes are exposed on the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemes" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.TimestampFormat">
      <summary>
            Gets or sets the formatting string used to render a value of the <see cref="T:System.DateTimeOffset" /> type when the <see cref="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackendOptions.IncludeTimestamp" /> property
            is set to <c>true</c>. The default value is <c>null</c>.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingTypeSource">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingTypeSource.#ctor(PostSharp.Patterns.Diagnostics.LoggingNamespaceSource,System.Type)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingTypeSource" />.
            </summary>
      <param name="parent">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingNamespaceSource" />.</param>
      <param name="type">The <see cref="T:System.Type" /> being logged.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingTypeSource.IsBackendEnabled(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Checks whether logging is enabled in the back-end for the given level.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> for <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.#ctor(PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.AppendDelimiter">
      <summary>
            Appends a <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.Delimiter" /> to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.AppendProlog">
      <summary>
            Appends the indent string, context description, and the record kind to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.ArraySegment`1" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.AppendSemanticParameter(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,System.String,System.String,System.Int32)">
      <summary>
            Appends a parameter of <see cref="T:System.String" /> type to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.String" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />. This method overload is strongly typed.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.BackendOptions">
      <summary>
            Gets the back-end options.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.BeginThemedText(PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem)">
      <summary>
            Sets the theme item for the next characters appended to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="item">Theme item.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.Dispose">
      <summary>
            Finishes the logging of the current record. Calling this method does not actually make
            the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> unusable, but it makes it usable for a
            next record in the same thread.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.EmitRecord">
      <summary>
            Emits the record. Invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.EndThemedText">
      <summary>
            Resets the current theme to <see cref="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.Text" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.Reset">
      <summary>
            Resets all fields and properties of the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to their initial value. Invoked by the
            <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.Write">
      <summary>
            Write the current log record to the console.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLogRecordBuilder.Write(PostSharp.Patterns.Formatters.UnsafeString)">
      <summary>
            Writes the final message to the back-end.
            </summary>
      <param name="message">The final message.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme">
      <summary>
            A simple implementation of a color theme that allows only for two colors per <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.#ctor(PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" /> and copies all values from a given other <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" />.
            </summary>
      <param name="model">The <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" /> from which all values will be copied.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.#ctor(System.Boolean)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" />.
            </summary>
      <param name="supportsAnsiCodes">Determines whether the theme supports VT ANSI codes.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.AddHightlightedItem(PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem)">
      <summary>
            Specifies that a <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem" /> should be formatted using the hightlighted style.
            </summary>
      <param name="item">A <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.Clone">
      <summary>
            Returns an editable copy of the current <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" />.
            </summary>
      <returns>An editable copy of the current <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.Freeze">
      <summary>
            Prevents modifications in the current <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.GetStyle(System.String,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle" /> for a specific theme item.
            </summary>
      <param name="role">Role of the log record.</param>
      <param name="level">Level of the log record.</param>
      <param name="kind">Kind of the log record.</param>
      <param name="item">Kind of item inside the log record.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.HightlightedStyles">
      <summary>
            Gets the styles used for highlighted text.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.NormalStyles">
      <summary>
            Gets the styles used for normal text.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.RemoveHighlightedItem(PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem)">
      <summary>
            Specifies that a <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem" /> should be formatted using the normal style.
            </summary>
      <param name="item">A <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme.SupportsAnsiCodes">
      <summary>
            Determines whether the theme supports VT escape codes. 
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem">
      <summary>
            Enumeration of item kinds that can be themed.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.Text">
      <summary>
            Normal message text.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.LevelTrace">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Trace" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.LevelDebug">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Debug" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.LevelInfo">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Info" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.LevelWarning">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Warning" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.LevelError">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Error" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.LevelCritical">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Critical" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.RecordKind">
      <summary>
            The <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />, when it is equal to <see cref="F:PostSharp.Patterns.Diagnostics.LogLevel.Trace" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.MemberName">
      <summary>
            The member name.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.TypeName">
      <summary>
            The type name.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.This">
      <summary>
            The value of the <c>this</c> parameter.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.Exception">
      <summary>
            The exception type.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ParameterType">
      <summary>
            A parameter type.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ParameterName">
      <summary>
            A parameter name.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ParameterValue">
      <summary>
            A parameter value.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ReturnItemName">
      <summary>
            The name of a return item, if the method returns a tuple.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ReturnItemValue">
      <summary>
            The value of a return item, if the method returns a tuple.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ReturnValue">
      <summary>
            The return value.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.CustomParameterValue">
      <summary>
            A parameter in a custom string.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.SourceFile">
      <summary>
            The path of the source file.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.SourceLine">
      <summary>
            The line of the source file.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.ExecutionTime">
      <summary>
            The duration of the method execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.AwaitedContextId">
      <summary>
            The id of the awaited context.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.AwaitedType">
      <summary>
            The name of the type that returned the awaitable.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.AwaitedMethod">
      <summary>
            The name of the method that returned the awaitable.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.AsyncCallId">
      <summary>
            The id of the current async state machine.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.Role">
      <summary>
            The role of the logging record.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.Time">
      <summary>
            The current time.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.OtherSemanticParameter">
      <summary>
            Another semantic parameter.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem.Delimiter">
      <summary>
            A delimiter (such as a comma).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemes">
      <summary>
            A collection of color themes for use with the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleLoggingBackend" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemes.Classic">
      <summary>
            The classic and default theme. Does not hightlight individual parameters.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemes.Dark">
      <summary>
            The most readable theme for use on black background. Highlights parameter and return values.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemes.None">
      <summary>
            No formatting.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle">
      <summary>
            Represents a style in a console theme. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle.#ctor(System.String,System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle" />.
            </summary>
      <param name="ansiCode">The VT ANSI code for the style. This parameter can be <c>null</c> if the whole theme does not support VT ANSI codes.</param>
      <param name="foregroundColor">The foreground color (used as a fallback when the console does not support VT ANSI codes).</param>
      <param name="backgroundColor">The background color (used as a fallback when the console does not support VT ANSI codes).</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle.AnsiCode">
      <summary>
            Gets the VT ANSI code for the style.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle.BackgroundColor">
      <summary>
            Gets the background color (used as a fallback when the console does not support VT ANSI codes).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle.ForegroundColor">
      <summary>
            Gets the foreground color (used as a fallback when the console does not support VT ANSI codes).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.IConsoleTheme">
      <summary>
            Exposes the semantics of a console color theme. A simple implementation is provided by the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleTheme" /> class,
            and ready-made themes are exposed on the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemes" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Console.IConsoleTheme.GetStyle(System.String,PostSharp.Patterns.Diagnostics.LogLevel,PostSharp.Patterns.Diagnostics.LogRecordKind,PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem)">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle" /> for a specific theme item.
            </summary>
      <param name="role">Role of the log record.</param>
      <param name="level">Level of the log record.</param>
      <param name="kind">Kind of the log record.</param>
      <param name="item">Kind of item inside the log record.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeStyle" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.IConsoleTheme.SupportsAnsiCodes">
      <summary>
            Determines whether the theme supports VT escape codes. 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.IConsoleTheme.SupportsThemeItems">
      <summary>
            Determines whether the theme supports differentiating the style according to the <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Console.ConsoleThemeItem" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Console.LogLevelArray`1">
      <summary>
            A high-performance map of <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> to something else.
            </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Console.LogLevelArray`1.Item(PostSharp.Patterns.Diagnostics.LogLevel)">
      <summary>
            Gets or sets the value corresponding to a given <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.
            </summary>
      <param name="level">A <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" />.</param>
      <returns>The value mapped to <paramref name="level" />.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Backends.Null.NullLoggingBackend">
      <summary>
            Logging back-end that does not do anything.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Backends.Null.NullLoggingBackend.CreateRecordBuilder">
      <summary>
            Creates a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <returns>A new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Backends.Null.NullLoggingBackend.Instance">
      <summary>
            Gets the singleton instance of <see cref="T:PostSharp.Patterns.Diagnostics.Backends.Null.NullLoggingBackend" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents an asynchronous custom activity, i.e. an activity
            opened using <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenAsyncActivity(System.String)" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.LoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext" />.
            </summary>
      <param name="backend">The parent context.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.CustomActivityKind">
      <summary>
            Gets the kind of <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity" /> represented by the current context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.IsHidden">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> is hidden. Hidden contexts may define properties but should not be rendered.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.Open(PostSharp.Patterns.Diagnostics.LoggingTypeSource,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
      <summary>
            Opens the current context.
            </summary>
      <param name="typeSource">The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the declaring type of the context.</param>
      <param name="options">Options of the new context.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.SetWaitDependency(System.Object)">
      <summary>
            Sets the wait dependency for the current context, i.e. sets a representation of what the current context
            is waiting for. This operation is available only in custom contexts.
            </summary>
      <param name="waited">The "thing" being waited for (for instance a <see cref="T:System.Threading.Tasks.Task" /> or a <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" />).</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.StartTimestamp">
      <summary>
            Gets the timestamp (given by <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.CurrentTimestamp" />) of the moment when the activity started.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.SyntheticParentId">
      <summary>
            When this property returns a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property shall use the
            value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticParentId" /> property as the parent identifier, instead of recursively building
            the synthetic identifier based on <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ParentContext" />.  You can set this property when you open a custom
            activity by configuring the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions" /> object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncCustomActivityLoggingContext.SyntheticRootId">
      <summary>
            When this property returns a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property shall return the
            same value as the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticRootId" /> property, instead of starting with the id of the parent context. You can set this property when you open a custom
            activity by configuring the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions" /> object.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that can represent an async method execution or an async custom activity.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncLoggingContext.IsAsync">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> represents an async method or an asynchronous custom activity.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents an asynchronous method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.LoggingBackend)">
      <summary>
            Creates an instance of <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.AsyncCallId">
      <summary>
            Gets the unique identifier of the asynchronous call represented by the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.AwaitedMethod">
      <summary>
            Gets the awaited method  (i.e. the operand of the <c>await</c> operator),
            or <c>null</c> if it could not be determined or if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.IncludeAwaitedTask" /> profile property is set to <c>false</c>.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.AwaitedTask">
      <summary>
            Gets the awaited <see cref="T:System.Threading.Tasks.Task" />  (i.e. the operand of the <c>await</c> operator),
            or <c>null</c> if it could not be determined or if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.IncludeAwaitedTask" /> profile property is set to <c>false</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.Open(PostSharp.Aspects.AsyncCallId,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Opens the context.
            </summary>
      <param name="asyncCallId">The <see cref="T:System.Threading.Tasks.Task" /> associated with the async method.</param>
      <param name="memberInfo">Information about the async method.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.SetAwaitedTask(System.Threading.Tasks.Task,System.Reflection.MethodBase)">
      <summary>
            Sets the awaited <see cref="T:System.Threading.Tasks.Task" /> and/or <see cref="T:System.Reflection.MethodBase" />
            (i.e. the operand of the <c>await</c> operator).
            </summary>
      <param name="awaitedTask">The awaited <see cref="T:System.Threading.Tasks.Task" />, or <c>null</c> if the <see cref="T:System.Threading.Tasks.Task" /> cannot be determined.</param>
      <param name="awaitedMethod">The awaited <see cref="T:System.Reflection.MethodBase" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.AsyncMethodLoggingContext.Task">
      <summary>
            Gets the <see cref="T:System.Threading.Tasks.Task" /> that is currently associated to the current async method invocation.
            An async method invocation may be associated to several different tasks during its lifetime.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie">
      <summary>
            Represents a correlation between two <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />. This type is created by the
            <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.CreateCorrelationCookie" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie.#ctor(PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie" />.
            </summary>
      <param name="parentContext">The parent context (the one of the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.CreateCorrelationCookie" /> method).</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie.Null">
      <summary>
            Gets a default instance of the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie" /> type.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie.ParentContext">
      <summary>
            Gets the parent context (the one of the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.CreateCorrelationCookie" /> method).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo">
      <summary>
            Stores information regarding a custom record, i.e. a record emitted by the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.#ctor(PostSharp.Patterns.Diagnostics.LoggingTypeSource,PostSharp.Patterns.Diagnostics.LogLevel,System.Int32,PostSharp.Patterns.Diagnostics.LogRecordKind,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo" />.
            </summary>
      <param name="source">Source type.</param>
      <param name="level">Log level</param>
      <param name="parameterCount">Number of parameters in the record text.</param>
      <param name="recordKind">Kind of record.</param>
      <param name="callerInfo">Information about the code invoking the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.Attributes">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordAttributes" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.CallerInfo">
      <summary>
            Gets information about the code invoking the <see cref="T:PostSharp.Patterns.Diagnostics.Logger" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.Level">
      <summary>
            Gets the record level.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.ParameterCount">
      <summary>
            Gets the number of parameters in the record text.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.Properties">
      <summary>
            Gets the properties of the log records.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.RecordKind">
      <summary>
            Gets the record kind.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo.Source">
      <summary>
            Gets the source type.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext">
      <summary>
            A degenerated kind of <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that is used to emit standalone records.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.LoggingBackend,PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.</param>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> in which the new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext" /> will be used.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext.IsAsync">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> represents an async method or an asynchronous custom activity.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext.Open(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.LoggingTypeSource)">
      <summary>
            Opens the context.
            </summary>
      <param name="parent">The parent context.</param>
      <param name="typeSource">The type emitting the record.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.EphemeralLoggingContext.ThreadContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> for the thread in which the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />
            is currently executed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.ICustomActivityLoggingContext">
      <summary>
            An <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ILoggingContext" /> that represents a custom activity (<see cref="T:PostSharp.Patterns.Diagnostics.LogActivity" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ICustomActivityLoggingContext.CustomActivityKind">
      <summary>
            Gets the kind of <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity" /> represented by the current context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ICustomActivityLoggingContext.StartTimestamp">
      <summary>
            Gets the timestamp (given by <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.CurrentTimestamp" />) of the moment when the activity started.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents an iterator.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.LoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext.IsAsync">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> represents an async method or an asynchronous custom activity.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext.Iterator">
      <summary>
            Gets the iterator object.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext.Open(System.Collections.IEnumerator,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Opens a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.IteratorLoggingContext" />.
            </summary>
      <param name="iterator">Iterator object associated with the current context.</param>
      <param name="memberInfo">Information about the iterator method.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext">
      <summary>
            Represents an execution context, typically a method or a user activity.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ActivationContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> in which the current context was activated. If the current
            context has been resumed, <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ActivationContext" /> refers to the context in which the context was resumed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Backend">
      <summary>
            Gets the parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" /> of the current context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.CreateCorrelationCookie">
      <summary>
            Creates a cookie that can be used to correlate, using the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SetCorrelation(PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie)" /> method, another context
            to the current context.
            </summary>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie" />, or <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie.Null" />
            if the current context (and the current back-end) does not support correlations.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description">
      <summary>
            Gets the description of the current context. The description is typically set by the <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> when building the opening record of a context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ForEachProperty(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{System.Object},System.Boolean)">
      <summary>
            Invokes a delegate for each property defined in the current logging context and optionally in its ancestor contexts.
            </summary>
      <param name="visitor">The delegate to invoke. The <c>state</c> parameter of the delegate will be assigned to a dummy variable.</param>
      <param name="includeAncestors">
        <c>true</c> if ancestor contexts should be visited, <c>false</c> if only the current context should be visited.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ForEachProperty``1(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{``0},``0@,System.Boolean)">
      <summary>
            Invokes a delegate for each property defined in the current logging context and optionally in its ancestor contexts, and specifies passes a state object
            to the delegate.
            </summary>
      <param name="visitor">The delegate to invoke. The <c>state</c> parameter of the delegate will be assigned to a dummy variable.</param>
      <param name="includeAncestors">
        <c>true</c> if ancestor contexts should be visited, <c>false</c> if only the current context should be visited.</param>
      <param name="state">Some state that will be passed to the <paramref name="visitor" /> delegate.</param>
      <typeparam name="T">Type of the state passed to the <paramref name="visitor" /> delegate.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.GetCustomRecordBuilder(PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo@)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> for the current context to build a custom record.
            </summary>
      <param name="recordInfo">Information about the record.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.GetRecordBuilder(PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> for the current context to build a standard record for a given method.
            </summary>
      <param name="logRecordInfo">Information about the record.</param>
      <param name="logMemberInfo">Information about the member.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Id">
      <summary>
            Gets or set the identifier of the current context. This value is created
            according to the strategy set in <c>LoggingBackend.Options.</c><see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.ContextIdGenerationStrategy" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.IdGenerationStrategy">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.ContextIdGenerationStrategy" /> used to generate the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Id" /> property
            for the current context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.IndentLevel">
      <summary>
            Gets or sets the indentation level for the current context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.IsAsync">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> represents an async method or an asynchronous custom activity.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.IsDisposed">
      <summary>
            Determines whether the current context has been disposed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.IsHidden">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> is hidden. Hidden contexts may define properties but should not be rendered.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.IsSharable">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> can be accessed outside of its 
            nominal lifetime (for instance after the method has completed or a custom activity has been closed).
            Since contexts can be pooled and reused, consumers must call the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.MakeSharable" /> method
            if they want to keep a reference to the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> and access it after its nominal lifetime has completed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Kind">
      <summary>
            Gets the kind of the current context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.MakeSharable">
      <summary>
            Allows the current context to be shared beyond its normal lifecycle by preventing it from being returned to the pool.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.MemberName">
      <summary>
            Gets the name of the method or property related to the current context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ParentContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that created (initiated) the current context. This is the logical parent.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SetCorrelation(PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie)">
      <summary>
            Associates the current context with another context.
            </summary>
      <param name="correlationCookie">A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CorrelationCookie" /> created by the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.CreateCorrelationCookie" />
            method of another context.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SetWaitDependency(System.Object)">
      <summary>
            Sets the wait dependency for the current context, i.e. sets a representation of what the current context
            is waiting for. This operation is available only in custom contexts.
            </summary>
      <param name="waited">The "thing" being waited for (for instance a <see cref="T:System.Threading.Tasks.Task" /> or a <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" />).</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Source">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> corresponding, typically, to the declaring type of the member
            associated to the current context.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId">
      <summary>
            Gets a cross-process globally unique identifier for the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />.
            This value is created according to value of the <c>LoggingBackend.Options.</c><see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.SyntheticIdFormatter" /> property.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticParentId">
      <summary>
            When this property returns a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property shall use the
            value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticParentId" /> property as the parent identifier, instead of recursively building
            the synthetic identifier based on <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ParentContext" />.  You can set this property when you open a custom
            activity by configuring the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions" /> object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticRootId">
      <summary>
            When this property returns a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property shall return the
            same value as the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticRootId" /> property, instead of starting with the id of the parent context. You can set this property when you open a custom
            activity by configuring the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions" /> object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ThreadContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> for the thread in which the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />
            is currently executed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ToString(System.Text.StringBuilder)">
      <summary>
            Formats a description of the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> into a given <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="stringBuilder"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind">
      <summary>
            Kinds of logging contexts.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.Thread">
      <summary>
            Thread.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.AsyncMethod">
      <summary>
            Async method.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.SyncMethod">
      <summary>
            Normal method (not async, not iterator).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.SyncCustomActivity">
      <summary>
            Synchronous custom activity.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.AsyncCustomActivity">
      <summary>
            Asynchronous custom activity.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.Ephemeral">
      <summary>
            Ephemeral (one-use context).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.Contexts.LoggingContextKind.Iterator">
      <summary>
            Iterator.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo">
      <summary>
            Stores information regarding the method, field or property being logged.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.#ctor(PostSharp.Patterns.Diagnostics.LoggingProfile,PostSharp.Patterns.Diagnostics.LoggingSourceLocalState@,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo" /> without <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo" />.
            </summary>
      <param name="profile">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />.</param>
      <param name="memberName">Name of the method, property, or field.</param>
      <param name="parameterCount">Number of parameters in the method.</param>
      <param name="returnValueCount">Number of return values.</param>
      <param name="genericParameterCount">Number of generic method parameters.</param>
      <param name="localState">The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.#ctor(PostSharp.Patterns.Diagnostics.LoggingProfile,PostSharp.Patterns.Diagnostics.LoggingSourceLocalState@,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo" /> with <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.CallerInfo" />.
            </summary>
      <param name="profile">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" />.</param>
      <param name="memberName">Name of the method, property, or field.</param>
      <param name="parameterCount">Number of parameters in the method.</param>
      <param name="returnValueCount">Number of return values.</param>
      <param name="genericParameterCount">Number of generic method parameters.</param>
      <param name="localState">The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingSourceLocalState" />.</param>
      <param name="file">Caller source file.</param>
      <param name="line">Caller source line.</param>
      <param name="column">Caller source column.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.#ctor(PostSharp.Patterns.Diagnostics.LoggingProfile,PostSharp.Patterns.Diagnostics.LoggingTypeSource,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.#ctor(PostSharp.Patterns.Diagnostics.LoggingProfile,PostSharp.Patterns.Diagnostics.LoggingTypeSource,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.GenericParameterCount">
      <summary>
            Gets the number of generic parameters of the method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.MemberName">
      <summary>
            Gets the name of the method, property, or field.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.ParameterCount">
      <summary>
            Gets the number of parameters of the method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.Profile">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" /> with which the method is being logged.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.ReturnValueCount">
      <summary>
            Gets the number of return values of the method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.Source">
      <summary>
            Gets information about the source type.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.SourceLineInfo">
      <summary>
            Gets information about the source code location of the method, property, or field.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo.ThreadContext">
      <summary>
            Gets the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo">
      <summary>
            Contains information about a log record.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo.#ctor(PostSharp.Patterns.Diagnostics.LogRecordKind,PostSharp.Patterns.Diagnostics.LoggingOptions,System.Int64)">
      <summary>
            Initializes a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo" />.
            </summary>
      <param name="recordKind">Record kind.</param>
      <param name="options">Options.</param>
      <param name="id">Unique id of the record, used for caching.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo.Id">
      <summary>
            Unique identifier of the static parts of the record, which can be used for caching the message template.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo.Options">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingOptions" /> that apply to this record.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo.RecordKind">
      <summary>
            The kind of this record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodEntry" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException" />).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents a method or activity that can be suspended and resume (possibly on a different thread),
            such as an async method or an iterator.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.IsSuspended">
      <summary>
            Determines whether the current context is currently suspended (between a <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.Suspend" /> and a <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.Resume" />).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.Resume">
      <summary>
            Resumes the current context. Typically called when the state machine resumes execution, when the wait dependency
            is satisfied (in case of async methods) or when the <see cref="M:System.Collections.IEnumerator.MoveNext" /> method is called (in case of iterators).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.ResumeConditional">
      <summary>
            Resume the current context, but only if it is currently suspended.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.Suspend">
      <summary>
            Suspends the current context. Typically called when starting to wait for a wait dependency (the operand of the <c>await</c> operator
            in case of async methods), or after the <see cref="M:System.Collections.IEnumerator.MoveNext" /> method (in case of iterators). 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.ThreadContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> for the thread in which the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />
            is currently executed.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SuspendableLoggingContext.ToString(System.Text.StringBuilder)">
      <summary>
            Formats a description of the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> into a given <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="stringBuilder"></param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents a synchronous custom activity, opened by the <see cref="M:PostSharp.Patterns.Diagnostics.Logger.OpenActivity(System.String)" />
            method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" />.
            </summary>
      <param name="threadContext">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext" /> in which the activity is executed.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.CustomActivityKind">
      <summary>
            Gets the kind of <see cref="T:PostSharp.Patterns.Diagnostics.LogActivity" /> represented by the current context.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.IsHidden">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> is hidden. Hidden contexts may define properties but should not be rendered.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.Open(PostSharp.Patterns.Diagnostics.LoggingTypeSource,PostSharp.Patterns.Diagnostics.OpenActivityOptions@)">
      <summary>
            Opens the current context.
            </summary>
      <param name="typeSource">The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the declaring type of the context.</param>
      <param name="options">Options of the opened custom context.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.ReturnToPool">
      <summary>
            Returns the current instance to the pool to which it belongs. This method is invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.Dispose(System.Boolean)" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.SetWaitDependency(System.Object)">
      <summary>
            Sets the wait dependency for the current context, i.e. sets a representation of what the current context
            is waiting for. This operation is available only in custom contexts.
            </summary>
      <param name="waited">The "thing" being waited for (for instance a <see cref="T:System.Threading.Tasks.Task" /> or a <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" />).</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.StartTimestamp">
      <summary>
            Gets the timestamp (given by <see cref="P:PostSharp.Patterns.Diagnostics.LoggingServices.CurrentTimestamp" />) of the moment when the activity started.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.SyntheticParentId">
      <summary>
            When this property returns a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property shall use the
            value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticParentId" /> property as the parent identifier, instead of recursively building
            the synthetic identifier based on <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ParentContext" />.  You can set this property when you open a custom
            activity by configuring the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions" /> object.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncCustomActivityLoggingContext.SyntheticRootId">
      <summary>
            When this property returns a non-null value, the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property shall return the
            same value as the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticRootId" /> property, instead of starting with the id of the parent context. You can set this property when you open a custom
            activity by configuring the <see cref="T:PostSharp.Patterns.Diagnostics.OpenActivityOptions" /> object.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents a synchronous context (i.e. a context that executes as a single block, without being
            suspended).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.IsAsync">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> represents an async method or an asynchronous custom activity.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.ReturnToPool">
      <summary>
            Returns the current instance to the pool to which it belongs. This method is invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.Dispose(System.Boolean)" /> method.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.ThreadContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> for the thread in which the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />
            is currently executed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents a synchronous method (not an async method, not an iterator).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" />.
            </summary>
      <param name="threadContext">Information about the thread to which the new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext" /> shall belong.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext.Open(PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Opens the current context for a given member.
            </summary>
      <param name="memberInfo">Information about the method, property or field being logged.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.SyncMethodLoggingContext.ReturnToPool">
      <summary>
            Returns the current instance to the pool to which it belongs. This method is invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.SyncLoggingContext.Dispose(System.Boolean)" /> method.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext">
      <summary>
            A <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that represents the current thread. The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> has two usages.
            First, it is used to store all thread-local variables and objects. Then, it is used as the root object for all
            other contexts.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.#ctor(PostSharp.Patterns.Diagnostics.LoggingBackend,PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" />.
            </summary>
      <param name="backend">The parent <see cref="T:PostSharp.Patterns.Diagnostics.LoggingBackend" />.</param>
      <param name="recordBuilder">The thread-local <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.Dispose(System.Boolean)">
      <summary>
            Disposes the current object.
            </summary>
      <param name="disposing">
        <c>true</c> if the <see cref="M:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Dispose" /> method is called explicitly, <c>false</c> is the object is being finalized.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.GetCustomRecordBuilder(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo@)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> and initializes it to emit a custom record.
            </summary>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> to which the record relates.</param>
      <param name="recordInfo">Information about the custom record.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> properly initialized by calling the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.BeginCustomRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo@)" /> method.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.GetRecordBuilder(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> and initializes it for a given context, member, and record.
            </summary>
      <param name="context">The <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> to which the record relates.</param>
      <param name="logRecordInfo">Information about the log record.</param>
      <param name="logMemberInfo">Information about the method, property, or field.</param>
      <returns>A <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> properly initialized by calling the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)" /> method.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.IsAsync">
      <summary>
            Determines whether the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> represents an async method or an asynchronous custom activity.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.IsLogging">
      <summary>
            Determines whether the current thread is emitting a log record. This allows to avoid infinite recursion while logging.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext.ThreadContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> for the thread in which the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />
            is currently executed.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.CollectionFormatter`2">
      <summary>
            Formatter for any type that implements <see cref="T:System.Collections.Generic.IEnumerable`1" />. 
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.CollectionFormatter`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Formatters.CollectionFormatter`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.CollectionFormatter`2.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.DefaultSyntheticIdFormatter">
      <summary>
            An implementation of <see cref="T:PostSharp.Patterns.Diagnostics.Formatters.SyntheticIdFormatter" /> that is compatible with the
            Hierarchical Request-Id specification. Ids generated by this class are hierarchical and
            can be alphabetically sorted while respecting the natural time order.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.DefaultSyntheticIdFormatter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Formatters.DefaultSyntheticIdFormatter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.DefaultSyntheticIdFormatter.WriteContextId(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Diagnostics.Contexts.LoggingContext)">
      <summary>
            Generates the value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property of a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />.
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="context">The context for which the synthetic id needs to be generated.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.DefaultSyntheticIdFormatter.WriteRecordId(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Diagnostics.Contexts.LoggingContext)">
      <summary>
            Generates the value of the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SyntheticId" /> property of a <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="context">The context for which the synthetic id needs to be generated.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.HiddenFormatter`1">
      <summary>
            Formatters that always writes <c>*******</c> to the output.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Formatters.HiddenFormatter`1.Instance">
      <summary>
            Gets the singleton instance of <see cref="T:PostSharp.Patterns.Diagnostics.Formatters.HiddenFormatter`1" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.HiddenFormatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.IOverrideFormatter">
      <summary>
            Marker interface that indicates that this is a special <see cref="T:PostSharp.Patterns.Formatters.Formatter`1" />
            that should be used even in back-ends which don't normally use formatters.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.LazyFormatter`2">
      <summary>
            Formatter for <see cref="T:System.Lazy`1" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.LazyFormatter`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Formatters.LazyFormatter`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.LazyFormatter`2.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Lazy{`1})">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.LoggingFormattingRole">
      <summary>
            The <see cref="T:PostSharp.Patterns.Formatters.FormattingRole" /> for the Logging component.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.LoggingFormattingRole.#ctor">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Formatters.LoggingFormattingRole" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Formatters.LoggingFormattingRole.LoggingRole">
      <summary>
            Gets the logging role name (see <see cref="T:PostSharp.Patterns.Diagnostics.LoggingRoles" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Formatters.LoggingFormattingRole.Name">
      <summary>
            Gets the name of the <see cref="T:PostSharp.Patterns.Formatters.FormattingRole" />.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.OutFormatter`1">
      <summary>
            Always writes <c>&lt;out&gt;</c> to the output. Used to render the input value of <c>out</c> parameters.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.Formatters.OutFormatter`1.Instance">
      <summary>
            The singleton instance of <see cref="T:PostSharp.Patterns.Diagnostics.Formatters.OutFormatter`1" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.OutFormatter`1.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,`0)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.QueryableFormatter">
      <summary>
            Formatter for any type that implements <see cref="T:System.Linq.IQueryable" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.QueryableFormatter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Formatters.QueryableFormatter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.QueryableFormatter.Write(PostSharp.Patterns.Formatters.UnsafeStringBuilder,System.Linq.IQueryable)">
      <summary>
            Appends the description of an object into given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> (weakly-typed variant).
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="value">The value to be formatted.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate">
      <summary>
            Struct that is passed to <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetParameter``1(System.Int32,System.String,PostSharp.Reflection.ParameterKind,System.String,``0)" />
            when the parameter is of a <c>ref struct</c> type. This struct wraps the return value of the <see cref="M:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate.ToString" /> method
            of the <c>ref struct</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate.#ctor(System.String)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate" />.
            </summary>
      <param name="toStringValue">The value of the <see cref="M:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate.ToString" /> method for the <c>ref struct</c>.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate.Format(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Formatters.FormattingRole)">
      <summary>
            Appends a description of the current object to a given <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.
            </summary>
      <param name="stringBuilder">The <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> to which the object description should be written.</param>
      <param name="role">An object describing in which context the object is being formatted (e.g. caching or logging).</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.RefStructSurrogate.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.Formatters.SyntheticIdFormatter">
      <summary>
            An abstract class whose implementations generate the value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.SyntheticIdFormatter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.Formatters.SyntheticIdFormatter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.SyntheticIdFormatter.WriteContextId(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Diagnostics.Contexts.LoggingContext)">
      <summary>
            Generates the value of the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.SyntheticId" /> property of a <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />.
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="context">The context for which the synthetic id needs to be generated.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.Formatters.SyntheticIdFormatter.WriteRecordId(PostSharp.Patterns.Formatters.UnsafeStringBuilder,PostSharp.Patterns.Diagnostics.Contexts.LoggingContext)">
      <summary>
            Generates the value of the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SyntheticId" /> property of a <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            </summary>
      <param name="stringBuilder">The target <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" />.</param>
      <param name="context">The context for which the synthetic id needs to be generated.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder">
      <summary>
            Builds log record (typically, but not necessarily a string) for an action. You can think
            of the <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> as a semantic <see cref="T:System.Text.StringBuilder" />. PostSharp emits
            code that invoke methods such as 
            <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetParameter``1(System.Int32,System.String,PostSharp.Reflection.ParameterKind,System.String,``0)" /> or 
            <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetReturnValue``1(System.Int32,System.String,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0})" />,
            and the responsibility of the <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> is to format a record and emit it to the
            back-end.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.BeginCustomRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo@)">
      <summary>
            Initializes the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to emit a custom record.
            </summary>
      <param name="context">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> of the record.</param>
      <param name="recordInfo">Information about the record.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Initializes the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to emit a standard (i.e. non-custom) record for
            a given context and method.
            </summary>
      <param name="context">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> of the record.</param>
      <param name="recordInfo">Information about the record.</param>
      <param name="memberInfo">Information about the method, property, or field.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)">
      <summary>
            Begins to build a specified item.
            </summary>
      <param name="item">The item being built.</param>
      <param name="options">Options.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete">
      <summary>
            Emits the record and resets the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" />.
            This method invoked after all <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetThis``1(``0)" />, <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetParameter``1(System.Int32,System.String,PostSharp.Reflection.ParameterKind,System.String,``0)" /> and
            similar methods have been called. 
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Context">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> to which the record belongs.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.CustomRecordAttributes">
      <summary>
            Describes how the <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> will be used, when it is being used to build a custom message or a custom activity.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Dispose">
      <summary>
            Finishes the logging of the current record. Calling this method does not actually make
            the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> unusable, but it makes it usable for a
            next record in the same thread.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.EmitRecord">
      <summary>
            Emits the record. Invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.EndWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem)">
      <summary>
            Ends building a specified item.
            </summary>
      <param name="item"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.ForEachProperty(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{System.Object})">
      <summary>
            Invokes a delegate for each property defined in the current log record.
            </summary>
      <param name="visitor">The delegate to invoke. The <c>state</c> parameter of the delegate will be assigned to a dummy variable.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.ForEachProperty``1(PostSharp.Patterns.Diagnostics.Contexts.LoggingPropertyVisitor{``0},``0@)">
      <summary>
            Invokes a delegate for each property defined in the current log record.
            </summary>
      <param name="visitor">The delegate to invoke. The <c>state</c> parameter of the delegate will be assigned to a dummy variable.</param>
      <param name="state">Some state that will be passed to the <paramref name="visitor" /> delegate.</param>
      <typeparam name="T">Type of the state passed to the <paramref name="visitor" /> delegate.</typeparam>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.IsDisposed">
      <summary>
            Determines whether the current instance has been disposed.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.RecordKind">
      <summary>
            Gets the kind of the current record (e.g. <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodEntry" /> or <see cref="F:PostSharp.Patterns.Diagnostics.LogRecordKind.MethodException" />).
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Reset">
      <summary>
            Resets all fields and properties of the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to their initial value. Invoked by the
            <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetException(System.Exception)">
      <summary>
            Sets the exception for the method or activity.
            </summary>
      <param name="exception">An <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetExecutionTime(System.Double,System.Boolean)">
      <summary>
            Sets the method or activity execution time.
            </summary>
      <param name="executionTime">The execution time, in milliseconds.</param>
      <param name="isOvertime">
        <c>true</c> if <paramref name="executionTime" /> is over the threshold set in <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.ExecutionTimeThreshold" />,
            otherwise <c>false</c>.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetMethodGenericParameter``1(System.Int32)">
      <summary>
            Not implemented.
            </summary>
      <param name="index"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetParameter``1(System.Int32,System.String,PostSharp.Reflection.ParameterKind,System.String,``0)">
      <summary>
            Sets the value of a given parameter and uses the default formatter.
            </summary>
      <param name="index">Index of the parameter in the list of method parameters.</param>
      <param name="parameterName">Name of the parameter (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterName" /> property is <c>true</c>).</param>
      <param name="parameterKind">The kind of the parameter (whether the parameter is by ref or by value, input or output).</param>
      <param name="typeName">Formatted name of the type <typeparamref name="T" /> (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterType" /> property is <c>true</c>).</param>
      <param name="value">Value of the parameter  (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterValue" /> property is <c>true</c>).</param>
      <typeparam name="T">Type of the parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetParameter``1(System.Int32,System.String,PostSharp.Reflection.ParameterKind,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets the value of a given parameter and specifies the <see cref="T:PostSharp.Patterns.Formatters.Formatter`1" />.
            </summary>
      <param name="index">Index of the parameter in the list of method parameters.</param>
      <param name="parameterName">Name of the parameter (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterName" /> property is <c>true</c>).</param>
      <param name="parameterKind">The kind of the parameter (whether the parameter is by ref or by value, input or output).</param>
      <param name="typeName">Formatted name of the type <typeparamref name="T" /> (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterType" /> property is <c>true</c>).</param>
      <param name="value">Value of the parameter  (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterValue" /> property is <c>true</c>).</param>
      <param name="formatter">Formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">Type of the parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetReturnValue``1(System.Int32,System.String,System.String,``0)">
      <summary>
            Sets a given return value (there can be several return values in C# 7.0) and uses the default formatter.
            </summary>
      <param name="index">Index of the return value.</param>
      <param name="returnValueName">Name of the return value, or <c>null</c> if there is only one return value in the method.</param>
      <param name="typeName">Formatted name of the type <typeparamref name="T" />.</param>
      <param name="value">Return value.</param>
      <typeparam name="T">Type of the return value.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetReturnValue``1(System.Int32,System.String,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets a given return value (there can be several return values in C# 7.0) and uses a given formatter.
            </summary>
      <param name="index">Index of the return value.</param>
      <param name="returnValueName">Name of the return value, or <c>null</c> if there is only one return value in the method.</param>
      <param name="typeName">Formatted name of the type <typeparamref name="T" />.</param>
      <param name="value">Return value.</param>
      <param name="formatter">The formatter to be used to format <typeparamref name="T" />.</param>
      <typeparam name="T">Type of the return value.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetThis``1(``0)">
      <summary>
            Sets the <c>this</c> (instance) value and uses the default formatter. This method is only invoked if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeThisValue" /> property is <c>true</c>.
            </summary>
      <param name="value">The value of the <c>this</c> instance.</param>
      <typeparam name="T">Type of the class being logged.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetThis``1(``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets the <c>this</c> (instance) value and uses a given formatter.
            </summary>
      <param name="value">The value of the <c>this</c> instance.</param>
      <param name="formatter">The formatter to be used.</param>
      <typeparam name="T">Type of the class being logged.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SetTypeGenericParameter``1(System.Int32)">
      <summary>
            Not implemented.
            </summary>
      <param name="index"></param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.SyntheticId">
      <summary>
            Gets a cross-process globally unique identifier for the current <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" />.
            This value is created according to value of the <c>LoggingBackend.Options.</c><see cref="P:PostSharp.Patterns.Diagnostics.LoggingBackendOptions.SyntheticIdFormatter" /> property.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.ThreadContext">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.ThreadLoggingContext" /> to which the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> belongs.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan@,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@)">
      <summary>
            Writes a custom parameter (passed as an <see cref="T:PostSharp.Patterns.Formatters.CharSpan" />) and uses the default formatter.
            </summary>
      <param name="index">Index of the custom parameter in the formatting string.</param>
      <param name="parameterName">Name of the custom parameter.</param>
      <param name="options">Options.</param>
      <param name="value">Value of the custom parameter.</param>
      <typeparam name="T">Type of the custom parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan@,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Writes a custom parameter (passed as an <see cref="T:PostSharp.Patterns.Formatters.CharSpan" />) and uses a given formatter.
            </summary>
      <param name="index">Index of the custom parameter in the formatting string.</param>
      <param name="parameterName">Name of the custom parameter.</param>
      <param name="value">Value of the custom parameter.</param>
      <param name="options">Options.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">Type of the custom parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomParameter``1(System.Int32,System.ArraySegment{System.Char},``0)">
      <summary>
            Writes a custom parameter  (passed as an <c>ArraySegment&lt;char&gt;</c>) and uses the default formatter.
            </summary>
      <param name="index">Index of the custom parameter in the formatting string.</param>
      <param name="parameterName">Name of the custom parameter.</param>
      <param name="value">Value of the custom parameter.</param>
      <typeparam name="T">Type of the custom parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomParameter``1(System.Int32,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Writes a custom parameter (passed as an <c>ArraySegment&lt;char&gt;</c>) and uses a given formatter.
            </summary>
      <param name="index">Index of the custom parameter in the formatting string.</param>
      <param name="parameterName">Name of the custom parameter.</param>
      <param name="value">Value of the custom parameter.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">Type of the custom parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomString(PostSharp.Patterns.Formatters.CharSpan@)">
      <summary>
            Write a custom string passed as an <see cref="T:PostSharp.Patterns.Formatters.CharSpan" />.
            </summary>
      <param name="str">The string to be written.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomString(System.ArraySegment{System.Char})">
      <summary>
            Write a custom string passed as an <c>ArraySegment&lt;char&gt;</c>.
            </summary>
      <param name="str">The string to be written.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind">
      <summary>
            Enumerates the kinds of semantic parameters passed to the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)" /> method.
            The enumeration is a bit mask. Values can be combined with the <c>|</c> operator.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.None">
      <summary>
            None.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.RecordStatus">
      <summary>
            Record status.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.MemberName">
      <summary>
            Member name.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.TypeName">
      <summary>
            Type name.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.This">
      <summary>
            Value of the <c>this</c> parameter.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.Exception">
      <summary>
            Exception.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ParameterType">
      <summary>
            Parameter type.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ParameterName">
      <summary>
            Parameter name.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ParameterValue">
      <summary>
            Parameter value.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ReturnItemName">
      <summary>
            Name of the return value (if there are multiple return values).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ReturnItemValue">
      <summary>
            Return value  (if there are multiple return values).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ReturnValue">
      <summary>
            Return value (if there is a single return value).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.CustomParameterValue">
      <summary>
            Custom parameter (set by the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.WriteCustomParameter``1(System.Int32,System.ArraySegment{System.Char},``0)" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.SourceFile">
      <summary>
            Source file.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.SourceLine">
      <summary>
            Source line.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ExecutionTime">
      <summary>
            Duration of the method execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.AwaitedContextId">
      <summary>
            Id of the awaited context.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.AwaitedType">
      <summary>
            Type of the right value of the <c>await</c> operator.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.AwaitedMethod">
      <summary>
            Method of the right of the <c>await</c> operator.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.AsyncCallId">
      <summary>
            Id of the current state machine instance.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ExecutionTimeThreshold">
      <summary>
            Threshold for the duration of the method execution.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.PropertyName">
      <summary>
            Name of a property.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.PropertyValue">
      <summary>
            Value of a property.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.MessageName">
      <summary>
            Name of the custom message, in semantic messages.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ActivityOutcome">
      <summary>
            Outcome of the custom activity.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.ActivityName">
      <summary>
            Name of the custom activity, in semantic messages.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind.All">
      <summary>
            All flags.
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder">
      <summary>
            An implementation of <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> that builds text-based log records.
            This class is the base class for most back-ends.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.#ctor(PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackend)">
      <summary>
            Initializes a new <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder" />.
            </summary>
      <param name="backend">The parent back-end.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AddHiddenCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Method invoked by <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.WriteCustomParameter``1(System.Int32,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0})" /> when for parameter mode is <see cref="F:PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterMode.Hidden" />.
            The default implementation does not do anything.
            </summary>
      <param name="index"></param>
      <param name="parameterName"></param>
      <param name="value"></param>
      <param name="options"></param>
      <param name="formatter"></param>
      <typeparam name="T">Type of the parameter value.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendAsyncInfo">
      <summary>
            Appends information about the async method to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendClosingParenthesisConditional">
      <summary>
            Appends a closing parenthesis to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" /> if required.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendComma">
      <summary>
            Appends a command and a space to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, and resets the required punctuation set by <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.RequireComma" /> or <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.RequirePunctuation(System.Char)" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendCommaConditional">
      <summary>
            Appends a comma to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, unless this method is invoked for the first
            time for the current record.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendContextDescription">
      <summary>
            Appends the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> 
            (or the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource" /> name, if the type of the context is not equal to the source type of the record)
            to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <returns>
        <c>true</c> if the context description was non-empty, <c>false</c> if it was empty.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendContextDescription(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext)">
      <summary>
            Appends the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="context"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendDelimiter">
      <summary>
            Appends a <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.Delimiter" /> to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendDelimiterConditional">
      <summary>
            Appends a <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.Delimiter" /> to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />
            if the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.RequireDelimiter" /> method has been called previously.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendEpilogue">
      <summary>
            Appends the final part of log message to <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            This includes state machine number and execution time where relevant,
            but does not include exception details.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendExceptionDetails">
      <summary>
            Appends exception details to <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" /> if <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IncludeExceptionDetails" /> is set.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendExecutionTime">
      <summary>
            Appends the execution time to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendExecutionTimeThreshold">
      <summary>
            Appends the execution time threshold to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendIndentString(System.Int32)">
      <summary>
            Appends indentation for the given <paramref parameterName="indentLevel" /> to <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendMemberName">
      <summary>
            Appends name of the member for the current record
            (including the declaring type name, subject to the <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IncludeType" /> property) to
            the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, as well as an opening parenthesis.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendOpeningParenthesis">
      <summary>
            Appends an opening parenthesis to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendProlog">
      <summary>
            Appends the indent string, context description, and the record kind to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendRecordKind">
      <summary>
            Appends the <see cref="T:PostSharp.Patterns.Diagnostics.LogRecordKind" /> of the current record to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <returns>
        <c>true</c> if the method appended something, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.ArraySegment`1" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSemanticParameter(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,System.Object,PostSharp.Patterns.Formatters.IFormatter,System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.String" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.  This method overload is weakly typed.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSemanticParameter(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,System.String,System.String,System.Int32)">
      <summary>
            Appends a parameter of <see cref="T:System.String" /> type to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSemanticParameter``1(PostSharp.Patterns.Diagnostics.RecordBuilders.SemanticParameterKind,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0},System.String,System.Int32)">
      <summary>
            Appends a parameter to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, where the name is given as a <see cref="T:System.String" />, and uses a specific formatter. Back-ends that
            support semantic logging may store the parameter value semantically instead of appending it to the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />. This method overload is strongly typed.
            </summary>
      <param name="kind">Kind of semantic parameter.</param>
      <param name="prefix">Prefix to be prepended to <paramref name="name" />, or <c>null</c> if there is no prefix.</param>
      <param name="name">Parameter name. The <paramref name="name" /> parameter itself is not guaranteed to be unique in a given record. However,
            in combination with <paramref name="prefix" /> and <paramref name="index" />, it is guaranteed to be unique.</param>
      <param name="value">Parameter value.</param>
      <param name="index">Index of the parameter value, if there are several values for the same parameter name, or <c>-1</c>
            if there is a single parameter value for this parameter name.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSourceLineInfo">
      <summary>
            Appends source (file, line) information to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSpaces(System.Int32)">
      <summary>
            Appends a given number of spaces to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="count">The number of spaces to be appended.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendSpecialChar(System.Char)">
      <summary>
            Appends a special <see cref="T:System.Char" /> (which may require escaping with specific back-ends) to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="c"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendTrailingPeriod">
      <summary>
            Appends a trailing period (<c>.</c>) to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, respecting the <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.AppendTrailingPeriod" /> property.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendTypeName">
      <summary>
            Appends the name of the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource" /> to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Backend">
      <summary>
            Gets the parent back-end.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.BackendOptions">
      <summary>
            Shortcut for <c>this.Backend.Options</c>.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.BeginCustomRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.CustomLogRecordInfo@)">
      <summary>
            Initializes the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to emit a custom record.
            </summary>
      <param name="context">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> of the record.</param>
      <param name="recordInfo">Information about the record.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.BeginRecord(PostSharp.Patterns.Diagnostics.Contexts.LoggingContext,PostSharp.Patterns.Diagnostics.Contexts.LogRecordInfo@,PostSharp.Patterns.Diagnostics.Contexts.LogMemberInfo@)">
      <summary>
            Initializes the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to emit a standard (i.e. non-custom) record for
            a given context and method.
            </summary>
      <param name="context">The parent <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> of the record.</param>
      <param name="recordInfo">Information about the record.</param>
      <param name="memberInfo">Information about the method, property, or field.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.BeginWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem,PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordTextOptions@)">
      <summary>
            Begins to build a specified item.
            </summary>
      <param name="item">The item being built.</param>
      <param name="options">Options.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Dispose">
      <summary>
            Finishes the logging of the current record. Calling this method does not actually make
            the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> unusable, but it makes it usable for a
            next record in the same thread.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.EmitRecord">
      <summary>
            Emits the record. Invoked by the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.EmitRecord(System.Boolean)">
      <summary>
            Emits the record and specifies whether exception details should be appended to the text.
            </summary>
      <param name="includeExceptionDetails">
        <c>true</c> if exception details should be appended, otherwise <c>false</c>.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.EndContextDescription">
      <summary>
            Ends building the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> and starts building the action text.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.EndContextDescriptionConditional">
      <summary>
            Switches between building the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> and the action text.
            If the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.EndContextDescriptionConditional" /> method has been previously invoked, subsequent calls
            are ignored.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.EndWriteItem(PostSharp.Patterns.Diagnostics.Custom.CustomLogRecordItem)">
      <summary>
            Ends building a specified item.
            </summary>
      <param name="item"></param>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Exception">
      <summary>
            Gets the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Exception" /> for the current record, or <c>null</c> if no exception
            is associated to the current record.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.GetContextDescription">
      <summary>
            Gets the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> 
            or the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource" /> name, if the type of the context is not equal to the source type of the record.
            </summary>
      <returns></returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.GetContextDescriptionUnsafe">
      <summary>
            Gets an <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" /> representing the context <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> 
            or the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource" /> name, if the type of the context is not equal to the source type of the record.
            </summary>
      <returns>An <see cref="T:PostSharp.Patterns.Formatters.UnsafeString" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.GetContextForDescription">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext" /> that should be used when getting or appending the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" />.
            </summary>
      <returns>The current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Context" /> or the <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.ParentContext" /></returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.GetSourceName">
      <summary>
            Gets the name of the <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource" /> for the current record, respecting the <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.IncludeNamespace" /> property.
            </summary>
      <returns>The display name of <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.HasRecordKindName">
      <summary>
            Determines whether the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendRecordKind" /> will append anything for the current record.
            </summary>
      <returns>
        <c>true</c> if <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendRecordKind" /> will append something, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Level">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LogLevel" /> for the current record.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.MemberName">
      <summary>
            Gets the name of the method, property or field for the current record.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.MustBuildContextDescription">
      <summary>
            Determines whether the current <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> should be appended
            to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <returns>
        <c>true</c> if the current <see cref="P:PostSharp.Patterns.Diagnostics.Contexts.LoggingContext.Description" /> should be appended
            to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />, otherwise <c>false</c>.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Options">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingOptions" /> for the current record.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Profile">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProfile" /> for the current record.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.RequireComma">
      <summary>
            Requires the next call to <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendCommaConditional" /> to append a comma even.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.RequireDelimiter">
      <summary>
            Causes the next call to the <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendDelimiterConditional" /> to append a 
            <see cref="P:PostSharp.Patterns.Diagnostics.Backends.TextLoggingBackendOptions.Delimiter" /> to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.RequirePunctuation(System.Char)">
      <summary>
            Requires the next call to <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.AppendCommaConditional" /> to append a specific punctuation character.
            </summary>
      <param name="punctuation"></param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Reset">
      <summary>
            Resets all fields and properties of the current <see cref="T:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder" /> to their initial value. Invoked by the
            <see cref="M:PostSharp.Patterns.Diagnostics.RecordBuilders.LogRecordBuilder.Complete" /> method.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SetException(System.Exception)">
      <summary>
            Sets the exception for the method or activity.
            </summary>
      <param name="exception">An <see cref="T:System.Exception" />.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SetExecutionTime(System.Double,System.Boolean)">
      <summary>
            Sets the method or activity execution time.
            </summary>
      <param name="executionTime">The execution time, in milliseconds.</param>
      <param name="isOvertime">
        <c>true</c> if <paramref name="executionTime" /> is over the threshold set in <see cref="P:PostSharp.Patterns.Diagnostics.LoggingProfile.ExecutionTimeThreshold" />,
            otherwise <c>false</c>.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SetParameter``1(System.Int32,System.String,PostSharp.Reflection.ParameterKind,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets the value of a given parameter and specifies the <see cref="T:PostSharp.Patterns.Formatters.Formatter`1" />.
            </summary>
      <param name="index">Index of the parameter in the list of method parameters.</param>
      <param name="parameterName">Name of the parameter (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterName" /> property is <c>true</c>).</param>
      <param name="parameterKind">The kind of the parameter (whether the parameter is by ref or by value, input or output).</param>
      <param name="typeName">Formatted name of the type <typeparamref name="T" /> (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterType" /> property is <c>true</c>).</param>
      <param name="value">Value of the parameter  (only included if the <see cref="P:PostSharp.Patterns.Diagnostics.LoggingOptions.IncludeParameterValue" /> property is <c>true</c>).</param>
      <param name="formatter">Formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">Type of the parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SetReturnValue``1(System.Int32,System.String,System.String,``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets a given return value (there can be several return values in C# 7.0) and uses a given formatter.
            </summary>
      <param name="index">Index of the return value.</param>
      <param name="returnValueName">Name of the return value, or <c>null</c> if there is only one return value in the method.</param>
      <param name="typeName">Formatted name of the type <typeparamref name="T" />.</param>
      <param name="value">Return value.</param>
      <param name="formatter">The formatter to be used to format <typeparamref name="T" />.</param>
      <typeparam name="T">Type of the return value.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SetThis``1(``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Sets the <c>this</c> (instance) value and uses a given formatter.
            </summary>
      <param name="value">The value of the <c>this</c> instance.</param>
      <param name="formatter">The formatter to be used.</param>
      <typeparam name="T">Type of the class being logged.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.ShouldLogExceptionDetails">
      <summary>
            Determines whether exception details should be appended to the text of the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <returns></returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SourceLineInfo">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.Contexts.SourceLineInfo" /> for the current record.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.SourceType">
      <summary>
            Gets the source <see cref="T:System.Type" /> of the current record.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder">
      <summary>
            Gets the current <see cref="T:PostSharp.Patterns.Formatters.UnsafeStringBuilder" /> where everything is being appended.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.TypeSource">
      <summary>
            Gets the <see cref="T:PostSharp.Patterns.Diagnostics.LoggingTypeSource" /> for the current record.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.Write(PostSharp.Patterns.Formatters.UnsafeString)">
      <summary>
            Writes the final message to the back-end.
            </summary>
      <param name="message">The final message.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.WriteCustomParameter``1(System.Int32,PostSharp.Patterns.Formatters.CharSpan@,``0,PostSharp.Patterns.Diagnostics.Custom.CustomLogParameterOptions@,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Writes a custom parameter (passed as an <see cref="T:PostSharp.Patterns.Formatters.CharSpan" />) and uses a given formatter.
            </summary>
      <param name="index">Index of the custom parameter in the formatting string.</param>
      <param name="parameterName">Name of the custom parameter.</param>
      <param name="value">Value of the custom parameter.</param>
      <param name="options">Options.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">Type of the custom parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.WriteCustomParameter``1(System.Int32,System.ArraySegment{System.Char},``0,PostSharp.Patterns.Formatters.IFormatter{``0})">
      <summary>
            Writes a custom parameter (passed as an <c>ArraySegment&lt;char&gt;</c>) and uses a given formatter.
            </summary>
      <param name="index">Index of the custom parameter in the formatting string.</param>
      <param name="parameterName">Name of the custom parameter.</param>
      <param name="value">Value of the custom parameter.</param>
      <param name="formatter">The formatter to be used to format <paramref name="value" />.</param>
      <typeparam name="T">Type of the custom parameter.</typeparam>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.WriteCustomString(PostSharp.Patterns.Formatters.CharSpan@)">
      <summary>
            Write a custom string passed as an <see cref="T:PostSharp.Patterns.Formatters.CharSpan" />.
            </summary>
      <param name="str">The string to be written.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.WriteCustomString(System.ArraySegment{System.Char})">
      <summary>
            Write a custom string passed as an <c>ArraySegment&lt;char&gt;</c>.
            </summary>
      <param name="str">The string to be written.</param>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.WriteProperty(PostSharp.Patterns.Diagnostics.LoggingProperty,System.Object,System.Int32)">
      <summary>
            Appends the name and value of a property to the current <see cref="P:PostSharp.Patterns.Diagnostics.RecordBuilders.TextLogRecordBuilder.StringBuilder" />.
            </summary>
      <param name="property">The <see cref="T:PostSharp.Patterns.Diagnostics.LoggingProperty" />.</param>
      <param name="value">The evaluated property value.</param>
      <param name="index">The index of the property.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo">
      <summary>
            Extended information about a <see cref="T:System.Threading.Tasks.Task" />. Exposed by the <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoRegistry" /> class.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.CallerInfo">
      <summary>
            Gets information about the line of code that instantiated the <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.Context">
      <summary>
            Gets the context (for <see cref="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.CorrelatedContext" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.Kind">
      <summary>
            Gets the kind of <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" />.
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.Method">
      <summary>
            Gets the awaited method (for <see cref="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.Method" />).
            </summary>
    </member>
    <member name="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.Tasks">
      <summary>
            Gets the list of tasks (for <see cref="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.WhenAll" /> and <see cref="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.WhenAny" />).
            </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind">
      <summary>
            Kinds of <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" />.
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.Method">
      <summary>
            A method (<see cref="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.Method" /> is set).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.CorrelatedContext">
      <summary>
            A correlated logging context (<see cref="P:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo.Context" /> is set).
            </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.WhenAny">
      <summary>
        <see cref="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      </summary>
    </member>
    <member name="F:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoKind.WhenAll">
      <summary>
        <see cref="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      </summary>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoRegistry">
      <summary>
            Stores additional information about instances of the <see cref="T:System.Threading.Tasks.Task" /> class. This class
            is populated by the <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.ThreadingInstrumentationPolicy" /> and consumed by the Logging component.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoRegistry.GetTaskInfo(System.Threading.Tasks.Task)">
      <summary>
            Gets a <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" /> for a specific <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
      <param name="task">A <see cref="T:System.Threading.Tasks.Task" />.</param>
      <returns>The <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" /> associated with <paramref name="task" />, or <c>null</c> if no <see cref="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfo" />
            is associated with <paramref name="task" />.</returns>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.TaskInfoRegistry.RegisterMethod(System.Threading.Tasks.Task,System.Reflection.MethodInfo,PostSharp.Patterns.Diagnostics.Contexts.CallerInfo)">
      <summary>
            Associates a <see cref="T:System.Threading.Tasks.Task" /> with the <see cref="T:System.Reflection.MethodInfo" /> that created it.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> returned by <paramref name="method" />.</param>
      <param name="method">The method that returned <paramref name="task" />.</param>
      <param name="callerInfo">Information about the code calling the <paramref name="method" />.</param>
    </member>
    <member name="T:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.ThreadingInstrumentationPolicy">
      <summary>
            Policy (assembly-level aspect) that instruments the <c>System.Threading</c> and <c>System.Threading.Tasks</c> APIes
            to enable for semantic logging of multi-threaded or multi-tasked programs.
            </summary>
    </member>
    <member name="M:PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.ThreadingInstrumentationPolicy.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>PostSharp.Patterns.Diagnostics.ThreadingInstrumentation.ThreadingInstrumentationPolicy</parameter>
          </include>
        </markup>
      </summary>
    </member>
  </members>
</doc>